import networkx as nx
import matplotlib.pyplot as plt

eps = 500
options = {
    "node_color": "#5B5B5B",
    "node_size": 500,
    "width": 3,
    "edge_color": "#BEBEBE",
    "with_labels": True,
}
rel = [
    ["pos", "acceleration", "allow_speed", "angle", "change_lane", "distance", "lane_id", "lane_position",
     "last_action_time", "leader_vehicle_distance", "left_follower_vehicle_distance", "left_leader_vehicle_distance",
     "max_acceleration", "max_deceleration", "max_speed", "position_x", "position_y",
     "right_follower_vehicle_distance", "right_leader_vehicle_distance", "road_id", "signal_states", "speed", "tua",
     "wait_time"],
    ["right_follower_vehicle_distance", "0.85", "0.00", "0.43", "0.00", "2.14", "0.00", "0.00", "0.00", "0.00",
     "2.56", "3.85", "0.00", "0.00", "0.43", "0.00", "0.00", "50.85", "10.26", "0.00", "0.00", "0.00", "0.00",
     "28.63"],
    ["left_follower_vehicle_distance", "0.37", "0.00", "0.00", "0.00", "16.48", "0.37", "0.00", "0.00", "0.00",
     "44.94", "14.98", "0.00", "0.00", "0.00", "0.00", "0.00", "4.49", "1.50", "0.00", "0.00", "0.75", "0.00",
     "16.10"],
    ["position_x", "0.00", "4.11", "19.86", "0.00", "1.03", "0.68", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "1.71", "0.00", "0.68", "0.00", "0.00", "0.00", "13.70", "0.00", "31.16", "27.05"],
    ["position_y", "0.00", "2.05", "9.25", "0.00", "0.00", "0.34", "0.34", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "1.37", "0.00", "1.37", "0.00", "0.00", "0.00", "28.42", "0.00", "18.15", "38.70"],
    ["signal_states", "0.00", "0.34", "4.12", "0.00", "0.00", "1.03", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "0.00", "0.34", "0.00", "0.00", "0.00", "31.62", "0.00", "8.93", "53.61"],
    ["acceleration", "25.43", "0.00", "3.09", "0.34", "14.78", "0.69", "1.03", "0.00", "0.00", "3.09", "3.78",
     "0.00", "0.00", "0.69", "0.00", "0.00", "5.15", "2.75", "0.00", "2.06", "3.44", "2.06", "31.62"],
    ["lane_position", "0.68", "5.48", "14.38", "0.00", "32.88", "0.34", "6.51", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "1.37", "0.00", "0.34", "0.00", "0.00", "0.00", "0.34", "1.71", "9.93", "26.03"],
    ["angle", "0.00", "4.79", "32.88", "0.00", "0.68", "0.00", "0.34", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "2.74", "0.00", "0.00", "0.00", "0.00", "0.00", "9.59", "0.00", "21.92", "27.05"],
    ["lane_id", "0.00", "2.74", "14.73", "0.00", "3.42", "0.68", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "3.77", "0.00", "0.00", "0.00", "0.00", "0.00", "9.93", "0.00", "36.99", "27.74"],
    ["max_deceleration", "0.00", "5.48", "19.18", "0.00", "1.71", "1.71", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "3.42", "0.00", "0.00", "0.00", "0.00", "0.00", "10.96", "0.00", "32.88", "24.66"],
    ["wait_time", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.69", "0.00", "0.00", "99.31"],
    ["leader_vehicle_distance", "0.00", "0.00", "0.35", "0.00", "27.02", "0.00", "0.00", "0.00", "2.11", "0.00",
     "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "2.11", "0.70", "67.72"],
    ["speed", "0.00", "0.00", "0.69", "0.00", "60.48", "0.00", "0.00", "0.00", "0.00", "0.69", "0.00", "0.00",
     "0.00", "0.00", "0.00", "0.00", "0.34", "0.00", "0.00", "0.00", "11.34", "0.34", "26.12"],
    ["right_leader_vehicle_distance", "2.01", "0.50", "0.00", "0.00", "2.51", "0.00", "0.00", "0.00", "0.50", "3.02",
     "2.51", "0.00", "0.00", "0.00", "0.00", "0.50", "24.62", "36.18", "0.00", "1.01", "0.50", "0.50", "25.63"],
    ["road_id", "0.00", "3.77", "18.49", "0.00", "3.77", "2.74", "0.00", "0.00", "0.00", "0.34", "0.00", "0.00",
     "0.00", "2.40", "0.00", "0.34", "0.00", "0.00", "0.00", "10.96", "0.68", "30.82", "25.68"],
    ["change_lane", "0.00", "3.08", "15.41", "0.00", "2.74", "1.37", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "2.40", "0.00", "0.00", "0.00", "0.00", "0.34", "12.67", "0.00", "32.88", "29.11"],
    ["max_speed", "0.00", "2.40", "19.86", "0.00", "4.79", "0.34", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "1.71", "0.00", "0.34", "0.00", "0.00", "0.00", "11.99", "0.00", "31.51", "27.05"],
    ["tua", "0.00", "3.08", "21.58", "0.00", "1.03", "2.05", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "1.03", "0.00", "0.00", "0.00", "0.00", "0.00", "9.59", "1.03", "35.96", "24.66"],
    ["distance", "0.00", "0.00", "2.06", "0.00", "71.82", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "0.00", "1.03", "0.00", "25.09"],
    ["left_leader_vehicle_distance", "0.44", "0.00", "0.00", "0.00", "8.41", "0.88", "0.00", "0.00", "0.00", "13.72",
     "51.33", "0.00", "0.00", "0.00", "0.00", "0.00", "0.88", "0.00", "0.00", "0.00", "0.88", "0.00", "23.45"],
    ["max_acceleration", "0.00", "1.71", "19.52", "0.00", "4.79", "2.74", "0.00", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "3.08", "0.00", "0.00", "0.00", "0.00", "0.00", "9.93", "0.00", "38.01", "20.21"],
    ["last_action_time", "0.00", "3.08", "19.52", "0.00", "4.45", "0.68", "0.68", "0.00", "0.00", "0.00", "0.00",
     "0.00", "0.00", "2.40", "0.00", "0.00", "0.00", "0.00", "0.00", "15.75", "0.00", "30.14", "23.29"],
    ["allow_speed", "0.34", "11.64", "20.89", "0.00", "6.51", "0.34", "1.03", "0.00", "0.00", "0.68", "0.00", "0.00",
     "0.00", "2.05", "0.00", "0.00", "0.00", "0.00", "0.00", "3.77", "0.34", "29.11", "23.29"]
]
node_map = {}
G = nx.Graph()
edges = []
index_map = {}


def take_third(elem):
    return elem[2]


def get_name(n):
    f = n / 100
    s = n % 100
    res = str(f)
    if s != 0:
        res += "."
        if s < 10:
            res += "0"
        res += str(s)
    return res + "%"


for index in range(1, len(rel[0])):
    index_map[index] = rel[0][index]
    G.add_node(rel[0][index], name=rel[0][index])
    node_map[rel[0][index]] = True
for cnt in rel[1:]:
    if not node_map.get(cnt[0], False):
        G.add_node(cnt[0], name=cnt[0])
        node_map[cnt[0]] = True
    for index in range(1, len(cnt)):
        fr, to = cnt[0], index_map[index]
        w = int(float(cnt[index]) * 100)
        if w < eps:
            continue
        edges.append((fr, to, w))
edges.sort(key=take_third)
for edge in edges:
    fr, to, w = edge[0], edge[1], edge[2]
    G.add_edge(fr, to, weight=w)
# draw
print(G.number_of_edges())
pos = nx.spring_layout(G)
nx.draw(G, pos, **options)

# node_labels = nx.get_node_attributes(G, 'name')
# nx.draw_networkx_labels(G, pos, labels=node_labels)

plt.show()
